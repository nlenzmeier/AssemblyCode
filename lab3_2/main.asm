STACK_SEG SEGMENT STACK USE16
DB 100 DUP(?)
STACK_SEG ENDS

DATA_SEG SEGMENT 'DATA' USE16    ;CREATE THE TABLE
    SYM1   DB 9 DUP (02H)
    TAB   DB 0
    SYM2   DB 22 DUP (02H)
    SPACE   DB 00H
    SYM3   DB 15 DUP (02H)
    NUM   DB 10 DUP (04H)
    SYM4   DB 7 DUP (02H)
    A_CAP   DB 26 DUP (06H)
    SYM5     DB 6 DUP (02H)
    LCASE    DB 26 DUP (08H)
    SYM6   DB 133 DUP (02H)

    NOTSYM   DW 0000H
    SYMBOL   DW 0000H
    NUMBER   DW 0000H
    CAPITAL   DW 0000H
    LOWER   DW 0000H

    OUTMSG1   DB 'ENTER A STRING: $'
    OUTMSG2 DB 0DH,0AH,'INPUT STRING: $'
    OUTMSG3   DB 0DH,0AH,'CONTAINS: $'
    NUMBERS DB ' NUMBERS', 0DH,0AH,'$'
    SYMBOLS DB ' SYMBOLS', 0DH,0AH,'$'
    CAPS    DB ' CAPITALS',0DH,0AH,'$'
    LCASEs   DB ' LOWER CASE',0DH,0AH,'$'
    SIZE   DB 255
    COUNT   DB ?
    INCHAR   DB 100 DUP ('$')
    NEWLINE DB 0DH,0AH,'$'
DATA_SEG ENDS

CODE_SEG SEGMENT PARA 'CODE' PUBLIC USE16
ASSUME CS:CODE_SEG, DS:DATA_SEG, SS:STACK_SEG
MAIN PROC FAR
PUSH DS                         			;INITIATE THE PROGRAM
    XOR AX,AX
    PUSH AX
    MOV AX,DATA_SEG
    MOV DS,AX

    LEA DX,OUTMSG1 							;PRINT MESSAGE           
    MOV AH,9
    INT 21H

    LEA DX,SIZE             				;READ AND STORE STRING
    MOV AH,0AH 								;READ A STRING
    INT 21H

    MOV CX,0

    MOV CL,COUNT            				;GO THROUGH STORED STRING
    TEST CL,0FFH
    JZ FINISH
    LEA DI,INCHAR

ARRAY:           
   MOV BL,BYTE PTR [DI]     ;MOVE ASCII BYTE INTO BX
   MOV BH, 00H              ;CLEAR THE TOP OF BX
   MOV BL, BYTE PTR [BX]    ;GO TO TABLE AND GET NEW ADDRESS
   MOV BH, 01H              ;FINISH THE ADDRESS
   INC WORD PTR [BX]        ;INCREMENT THE VARIABLE
   INc DI
  
   LOOP ARRAY

    FINISH: LEA DX,OUTMSG2 	;PRINT A MESSAGE
    MOV AH,9
    INT 21H

    LEA DX,INCHAR           ;PRINT THE ENTERED STRING
    MOV AH,9
    INT 21H

    LEA DX,OUTMSG3          ;PRINT CONTAINS
    MOV AH,9
    INT 21H

    MOV AX,NUMBER        	;PRINT NUMBERS
    AAM
    ADD AX, 3030H
    MOV BX, AX
    
    MOV DL,BH        		;PRINT HIGH NUMBER
    MOV AH,2
    INT 21H

    MOV DL,BL        		;PRINT LOW NUMBER
    MOV AH,2
    INT 21H

    LEA DX,NUMBERS        	;PRINT A MESSAGE    
    MOV AH,9
    INT 21H

    MOV AX,SYMBOL        	;PRINT SYMBOLS
    AAM
    ADD AX, 3030H
    MOV BX, AX
    
    MOV DL,BH        		;PRINT HIGH NUMBER
    MOV AH,2
    INT 21H

    MOV DL,BL        		;PRINT LOW NUMBER
    MOV AH,2
    INT 21H

    LEA DX,SYMBOLS        	;PRINT A MESSAGE
    MOV AH,9
    INT 21H

    MOV AX,CAPITAL        	;PRINT CAPITAL
    AAM
    ADD AX, 3030H
    MOV BX, AX
  
    MOV DL,BH        		;PRINT HIGH NUMBER
    MOV AH,2
    INT 21H

    MOV DL,BL        		;PRINT LOW NUMBER
    MOV AH,2
    INT 21H

    LEA DX,CAPS        		;PRINT A MESSAGE
    MOV AH,9    
    INT 21H
  
    MOV AX,LOWER        	;PRINT LOWER CASE
    AAM
    ADD AX, 3030H
    MOV BX, AX
  
    MOV DL,BH        		;PRINT HIGH NUMBER
    MOV AH,2
    INT 21H

    MOV DL,BL        		;PRINT LOW NUMBER
    MOV AH,2
    INT 21H

    LEA DX,LCASEs        	;PRINT A MESSAGE
    MOV AH,9
    INT 21H

    MOV DX,OFFSET NEWLINE
    MOV AH,9        
    INT 21H

RET
MAIN ENDP
CODE_SEG ENDS
END MAIN